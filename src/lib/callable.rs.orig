<<<<<<< HEAD
use std::fmt;
=======
use crate::*;
>>>>>>> ec35dfa... Functions

use std::{
    fmt::{
        self,
        Debug,
        Display,
    },
    sync::Arc,
};

pub trait Callable: Debug + Display {
    fn call(
        &self,
        interp: &mut Interpreter,
        args: Vec<Value>,
    ) -> Result<Value, LoxError>;

    fn arity(&self) -> usize;
}

<<<<<<< HEAD
impl fmt::Debug for Callable {
=======
pub struct RustFn<F>(pub usize, pub F);

impl<F> Debug for RustFn<F> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "RustFn")
    }
}

impl<F> Display for RustFn<F> {
>>>>>>> ec35dfa... Functions
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "<native fn>")
    }
}

impl<F> RustFn<F>
where
    F: Fn(&mut Interpreter, Vec<Value>) -> Result<Value, LoxError>
        + Send
        + Sync,
{
    pub fn new(arity: usize, f: F) -> RustFn<F> {
        RustFn(arity, f)
    }
}

impl<'c, F> Callable for RustFn<F>
where
    F: Fn(&mut Interpreter, Vec<Value>) -> Result<Value, LoxError>
        + Send
        + Sync,
{
    fn call(
        &self,
        interp: &mut Interpreter,
        args: Vec<Value>,
    ) -> Result<Value, LoxError> {
        (self.1)(interp, args)
    }

    fn arity(&self) -> usize {
        self.0
    }
}

impl<'c, F> From<RustFn<F>> for Arc<dyn Callable>
where
    F: Fn(&mut Interpreter, Vec<Value>) -> Result<Value, LoxError>
        + Send
        + Sync
        + 'static,
{
    fn from(other: RustFn<F>) -> Arc<dyn Callable> {
        Arc::new(other) as Arc<_>
    }
}

#[derive(Debug)]
pub struct LoxFn {
    name:   Token,
    params: Vec<Token>,
    body:   Vec<Stmt>,
}

impl Display for LoxFn {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "<function>")
    }
}

impl From<LoxFn> for Arc<dyn Callable> {
    fn from(other: LoxFn) -> Self {
        Arc::new(other) as _
    }
}

impl LoxFn {
    pub fn new(name: &Token, params: &[Token], body: &[Stmt]) -> Self {
        LoxFn {
            name:   name.clone(),
            params: params.into(),
            body:   body.into(),
        }
    }
}

impl Callable for LoxFn {
    fn call(
        &self,
        interp: &mut Interpreter,
        args: Vec<Value>,
    ) -> Result<Value, LoxError> {
        let env = interp.environment.create_scope(None);
        let res = interp.with_env(env, |interp| {
            for (i, decl_param) in self.params.iter().enumerate() {
                interp.define(decl_param, args[i].clone());
            }

            interp.execute_block(&self.body)
        });
        interp.environment.destroy_scope(env);
        res.map(|opt| opt.unwrap_or(Primitive::Nil.into()))
    }

    fn arity(&self) -> usize {
        self.params.len()
    }
}
